AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-demo

  SAM MSA Web service DEMO

Globals:
  Function:
    Timeout: 30 # Labmda function lifetime (1 ~ 900 sec)
    MemorySize: 128 # Lambda function memory size (128MB ~ 10240MB)
    Tracing: PassThrough # AWS X-Ray tracing ( Active or PassThrough )
    Environment:
      Variables: # --env-vars takes precedence over these values in sam local
        DEMO_GREETING: "{{resolve:ssm:DEMO_GREETING:1}}"
        DEMO_USER: "{{resolve:ssm:DEMO_USER:1}}"
        DEMO_ENV: "production"
  HttpApi:
    CorsConfiguration: # CORS settings for all APIs
      AllowOrigin: "'*'"
      AllowHeaders: "'*'"
      AllowMethods: "'*'"
      #AllowCredentials: true # with any wildcard set for CORS, this is not allowed.
      MaxAge: "'43200'" # preflight cache max age

Resources:
  # SamDemoApi ===============================================================
  SamDemoApi:
    Type: AWS::Serverless::HttpApi # API Gateway V2(HTTP API)
    Properties:
      Name: SamDemoApi
      StageName: demo # prefix path to separate the deployment stages
      Domain: # setting custom domain for API Gateway
        DomainName: "sam-demo.cloudhus.com"
        # domain name you want to use
        CertificateArn: "{{resolve:ssm:DEMO_ACM_ARN:1}}"
        # CertificateArn can be easily generated by AWS Certificate Manager
        EndpointConfiguration: REGIONAL
        # EDGE for global API, REGIONAL for regional API
        Route53:
          # Route53 Hosted Zone ID which manages the domain
          HostedZoneId: "{{resolve:ssm:CLOUDHUS_HOSTED_ZONE:1}}"
  # Services ===============================================================
  # GrettingService
  GreetingService:
    Type: AWS::Serverless::Function # Lambda function
    Properties:
      PackageType: Zip # Zip(default) or Image
      CodeUri: services/greeting-service/ # local path to the code (S3 also supported)
      Handler: greeting-service # name of the executable binary file or handler function
      Runtime: go1.x # lambda function runtime
      Architectures: # lambda function ISA
        - x86_64
      Events: # events that trigger this lambda function.
        GreetingServiceRoot: # root path must be defined separately.
          Type: HttpApi # API Gateway V2(HTTP API)
          Properties:
            ApiId:
              Ref: SamDemoApi # reference to the API that we defined above.
            Path: /greeting # root path invocation
            Method: ANY # allowed HTTP methods
        GreetingServiceProxy: # proxy path for all routes except root
          Type: HttpApi # API Gateway V2(HTTP API)
          Properties:
            ApiId:
              Ref: SamDemoApi # same reference as above.
            Path: /greeting/{proxy+} # {proxy+} is a special path that matches any path
            Method: ANY
  # EchoService
  EchoService:
    Type: AWS::Serverless::Function # Lambda function
    Properties:
      PackageType: Zip # Zip(default) or Image
      CodeUri: services/echo-service/ # local path to the code (S3 also supported)
      Handler: index.handler # name of the executable binary file or handler function
      Runtime: nodejs18.x # lambda function runtime
      Architectures: # lambda function ISA
        - x86_64
      Events: # events that trigger this lambda function.
        EchoEvent: # proxy path for all routes except root
          Type: HttpApi # API Gateway V2(HTTP API)
          Properties:
            ApiId:
              Ref: SamDemoApi # same reference as above.
            Path: /echo/{word} # {proxy+} is a special path that matches any path
            Method: ANY
  # HelloWorldFunction
  HelloWorldFunction:
    Type: AWS::Serverless::Function # Lambda function
    Properties:
      PackageType: Zip # Zip(default) or Image
      CodeUri: services/hello-world/ # local path to the code (S3 also supported)
      Handler: hello-world # name of the executable binary file or handler function
      Runtime: go1.x # lambda function runtime
      Architectures: # lambda function ISA
        - x86_64
      Events: # events that trigger this lambda function.
        HelloWorldEvent: # root path must be defined separately.
          Type: HttpApi # API Gateway V2(HTTP API)
          Properties:
            ApiId:
              Ref: SamDemoApi # reference to the API that we defined above.
            Path: "/hello" # root path invocation
            Method: ANY # allowed HTTP methods

Outputs:
  SamDemoApi:
    Description: SAM-DEMO api endpoint
    Value: "https://sam-demo.cloudhus.com/"
  GreetingService:
    Description: GreetingService Lambda ARN
    Value: !GetAtt GreetingService.Arn
  GreetingServiceIamRole:
    Description: Implicit IAM Role created for Greeti
    Value: !GetAtt GrettingServiceRole.Arn
